cat > server.js <<EOF
import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import archiver from "archiver";
import dotenv from "dotenv";

dotenv.config();
const app = express();
app.use(bodyParser.json({ limit: "2mb" }));

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = process.env.OPENAI_API_URL || "https://api.openai.com/v1/chat/completions";
const MODEL = process.env.MODEL || "gpt-4o-mini";

async function callOpenAI(messages) {
  const res = await fetch(OPENAI_API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: \`Bearer \${OPENAI_API_KEY}\`,
    },
    body: JSON.stringify({
      model: MODEL,
      messages,
      temperature: 0.15,
      max_tokens: 4000,
    }),
  });
  if (!res.ok) {
    const txt = await res.text();
    throw new Error("OpenAI error: " + txt);
  }
  const data = await res.json();
  return data.choices[0].message.content;
}

app.post("/generate-app", async (req, res) => {
  try {
    const { name = "my-app", platform = "react", features = [], description = "" } = req.body;

    const system = "You are a code generator that outputs JSON only. The JSON must have keys: files (array of {path, content}), run_commands (array). Do NOT output anything else.";
    const user = \`Spec: {"name":"\${name}","platform":"\${platform}","description":"\${description}","features": \${JSON.stringify(features)}} Return JSON only.\`;

    const replyText = await callOpenAI([
      { role: "system", content: system },
      { role: "user", content: user }
    ]);

    let json = JSON.parse(replyText);
    if (!json.files || !Array.isArray(json.files)) {
      throw new Error("Invalid response from model: missing files array.");
    }

    res.setHeader("Content-Type", "application/zip");
    res.setHeader("Content-Disposition", \`attachment; filename=\${name}.zip\`);
    const archive = archiver("zip", { zlib: { level: 9 } });
    archive.pipe(res);

    for (const file of json.files) {
      archive.append(file.content, { name: file.path });
    }

    const runCmds = (json.run_commands || []).join("\\n");
    const readme = \`# \${name}\\n\\nGenerated by AppBuilder AI.\\n\\nRun commands:\\n\\n\${runCmds}\\n\`;
    archive.append(readme, { name: "README.md" });

    await archive.finalize();
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: String(err.message) });
  }
});

app.get("/", (_, res) => res.send("AppBuilder AI backend running."));
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(\`Backend listening on \${port}\`));
EOF

